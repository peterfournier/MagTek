using System.Collections.Generic;
using Xamarin.MagTek.Forms.Delegates;

namespace Xamarin.MagTek.Forms.Models
{
    public interface IeDynamoService
    {
        bool CreateBond(string address);
        bool CloseDevice();
        bool IsDeviceConnected();
        bool IsDeviceEMV();
        bool IsDeviceOpened();
        bool OpenDevice();
        event OnARQCReceivedDelegate OnARQCReceivedDelegate;
        event OnBleReaderConnectedDelegate OnBleReaderConnectedDelegate;
        event OnBleReaderDidDiscoverPeripheralDelegate OnBleReaderDidDiscoverPeripheralDelegate;
        event OnBleReaderStateUpdatedDelegate OnBleReaderStateUpdatedDelegate;
        event OnCardSwipeDidGetTransErrorDelegate OnCardSwipeDidGetTransErrorDelegate;
        event OnCardSwipeDidStartDelegate OnCardSwipeDidStartDelegate;
        event OnDataReceivedDelegate OnDataReceivedDelegate;
        event OnDeviceConnectionDidChangeDelegate OnDeviceConnectionDidChangeDelegate;
        event OnDeviceErrorDelegate OnDeviceErrorDelegate;
        event OnDeviceExtendedResponseDelegate OnDeviceExtendedResponseDelegate;
        event OnDeviceListDelegate OnDeviceListDelegate;
        event OnDeviceNotPairedDelegate OnDeviceNotPairedDelegate;
        event OnDeviceResponseDelegate OnDeviceResponseDelegate;
        event OnDisplayMessageRequestDelegate OnDisplayMessageRequestDelegate;
        event OnEMVCommandResultDelegate OnEMVCommandResultDelegate;
        event OnTransactionResultDelegate OnTransactionResultDelegate;
        event OnTransactionStatusDelegate OnTransactionStatusDelegate;
        event OnUserSelectionRequestDelegate OnUserSelectionRequestDelegate;
        ICollection<IDiscoveredDevice> GetDiscoveredPeripherals();
        int CancelTransaction();
        int CardPANLength();
        int MagnePrintLength();
        int ProductID();
        int SendCommandToDevice(string pData);
        int SendcommandWithLength(string command);
        int SendExtendedCommand(string commandIn);
        int SetAcquirerResponse(byte response, int length);
        int SetUserSelectionResult(byte status, byte selection);
        int StartTransaction(byte timeLimit, byte cardType, byte option, byte amount, byte transactionType, byte cashBack, byte currencyCode, byte reportingOption);
        long BatteryLevel();
        long ConnectionType();
        long DeviceType();
        long SwipeCount();
        object GetDeviceInformationDictionary();
        string CapMagStripeEncryption();
        string CapMSR();
        string CapTracks();
        string CardExpDate();
        string CardIIN();
        string CardLast4();
        string CardName();
        string CardPAN();
        string CardServiceCode();
        string CardStatus();
        string DeviceCaps();
        string DeviceName();
        string DevicePartNumber();
        string DeviceSerial();
        string DeviceStatus();
        string EncryptionStatus();
        string ExpDateMonth();
        string ExpDateYear();
        string Firmware();
        string GetTagValue(int tag);
        string KSN();
        string MagnePrint();
        string MagnePrintStatus();
        string MagTekDeviceSerial();
        string MaskedTracks();
        string OperationStatus();
        string ResponseData();
        string ResponseType();
        string SDKVersion();
        string SessionID();
        string TLVPayload();
        string TLVVersion();
        string Track1();
        string Track1DecodeStatus();
        string Track1Masked();
        string Track2();
        string Track2DecodeStatus();
        string Track2Masked();
        string Track3();
        string Track3DecodeStatus();
        string Track3Masked();
        string TrackDecodeStatus();
        void ClearBuffers();
        void ListenForEvents(int @event);
        void RequestDeviceList(int type);        
        void SetConfigurationParams(string pData);
        void SetConnectionType(int connectionType);
        void SetDeviceProtocolString(string pData);
        void SetDeviceType(int deviceType);
        void StartScanningForPeripherals();
        void StopScanningForPeripherals();
    }
}
